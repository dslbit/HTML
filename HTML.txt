(Day 1)

# Intro
 > Para começar a criar um website, uma página na internet, é imprescindível entender o que é o HTML, pois ele é a base de toda página na internet. HTML significa Hyper Text Markup Language, ou seja, linguagem de marcação de hipertexto. É uma padronização, um consenso, e um modo para escrever e marcar (classificar) longas sequências de texto. Sim, uma página da internet é um conglomerado de texto.

 > HTML é uma linguagem de marcação, ou seja, você vai marcar como um determinado conteúdo vai ser interpretado pelo navegador. Ela define elementos que te ajudam a especificar como um determinado conteúdo deve ser interpretado pelo navegador. Então há elementos para especificar apenas um título, parágrafo, imagem e outras coisas.

 > Um dos trabalhos de um navegador é interpretar o documento HTML. Ele vai usar o documento para decidir como exibir os elementos do documento formando assim as nossas tão conhecidas "páginas da internet".

# Elemento HTML
 > Um elemento HTML é definido por uma etiqueta (tag) de abertura e fechamento. Por exemplo um parágrafo:

   (etq. abertura)     (etq. fechamento)
	 <p>                 </p>

 > Todas as etiquetas tem a estrutura com colchetes angulares < >, o que muda é a distinção entre a etiqueta de abertura e fechamento, onde a de fechamento contém uma barra antes do identificador da etiqueta. Logo, em uma etiqueta padrão você vai ter o colchete angular de abertura; o identificador da etiqueta; o colchete angular de fechamento; o conteúdo do elemento; e, seguindo o padrão, a etiqueta de fechamento. Vale lembrar que existem elementos que são vazios, isso significa que eles não tem conteúdo e nem etiqueta de fechamento (por exemplo o elemento <br> que define uma quebra de linha no documento).

	<nome_etiqueta> Conteúdo </nome_etiqueta>

# Um simples documento HTML

<!DOCTYPE html>
<html>
	<head>
		<title>Page Title</title>
	</head>
	<body>
		<h1>My First Heading</h1>
		<p>My first paragraph</p>
	</body>
</html>

 > "<!DOCTYPE html>" Informa ao navegador que o documento é um documento HTML5, é um elemento que ajuda (ao informar) os navegadores a exibir páginas corretamente. É um elemento que precisa aparecer apenas uma vez antes de todo e qualquer elemento.
 > "<html> ... </html>" É o elemento raiz e essencial de um documento HTML.
 > "<head> ... </head>" É o elemento que abrange os elementos semânticos (comportamentais) do documento.
 > "<title> ... </title>" É um elemento comportamental usado para especificar o título da página que vai aparecer na barra do navegador e na aba do navegador.
 > "<body> ... </body>" É o elemento que abrange os elementos visuais do documento.
 > "<h1> ... </h1>" É um elemento visual que define um título de maior importância.
 > "<p> ... </p>" É um elemento visual que define um parágrafo.

 > HTML não é sensível à caixa alta, isso significa que os elementos <P> e <p> são a mesma coisa, mas a recomendação da W3C é definir os elementos em caixa baixa.

# Criando um documento HTML
 > Sabendo da estrutura padrão de um documento HTML, ou seja, de uma página da internet, tudo o que você vai precisar para criar uma página HTML é um navegador e um editor de texto. No caso do Windows, temos o navegador padrão e o editor de texto pode ser o simples "bloco de notas". Ao criar o documento de texto só é preciso fazer uma alteração nele ao salvar, isso porque a extensão do arquivo deve ser ".htm" ou ".html" (são a mesma coisa) invés de ".txt". Uma extensão ".txt" diz ao sistema que o arquivo é um arquivo de texto padrão, por outro lado, uma extensão ".html" informa ao sistema que o arquivo é um documento HTML (normalmente aberto por padrão por navegadores).

# Elementos básicos
 > Um elemento é tudo o que estiver contido entre a abertura e o fechamento de uma etiqueta. Elementos podem ser aninhados, ou seja, podemos ter elementos dentro de elementos.

 > Os elementos de título "<h1>" seguem até "<h6>", onde "<h1>" informa o título de maior importância e "<h6>" o título de menor importância. Essa mudança não é meramente visual, há sentido semântico para os motores de busca também.

 > Parágrafos de texto são definidos pelo elemento "<p>".

 > Quebras de linhas em parágrafos são definidos pelo elemento "<br>".
	
	(exemplo de quebra de linha em um parágrafo)
	<p>This is a<br>paragraph with a line break.</p>

 > Links são definidos pelo elemento "<a href="...">" (significa âncora). "href" é um atributo de um elemento e atributos apenas fornecem ao navegador informações adicionais sobre o elemento. Diferentes elementos têm diferentes atributos.

	(exemplo de link)
	<a href="https://www.google.com"> Google </a>

 > Imagens são definidas pelo elemento "<img>" e os atributos deste elemento são "src" que informa a fonte do arquivo da imagem, "alt" uma descrição ou texto alternativo à imagem caso ela não carregue ou caso o usuário estiver usando um leitor de tela, "width" largura da imagem, "height" altura da imagem.
	
	(exemplo da etiqueta de imagem)
	<img src="cat.jpg" alt="A fluffy fat white cat." width="300" height="250">

# Atributos
 > Todo elemento HTML pode conter atributos que são informações adicionais sobre um elemento. Ele sempre deve ser especificado na etiqueta de abertura e é no padrão nome/valor (por exemplo: name="value").

 > O atributo "style" é utilizado para adicionar a um elemento cores, font, tamanho, e outros.

	(exemplo do uso do atributo "style")
	<p style="color: red;">This is a red paragraph.</p>

 > O atributo "lang" é utilizado na etiqueta "<html>" e especifica o idioma da página. Ele sempre deve ser especificado, pois ajudam os motores de busca e navegadores na hora de buscar e exibir a página. No atributo "lang" podemos especificar não só o idioma mas também o país, por exemplo "en-US" para Inglês-USA ou "pt-BR" para Português-Brasil. Todos esses códigos de linguagem (HTML language codes) podem ser encontrados no site da W3C (https://www.w3schools.com/tags/ref_language_codes.asp).

	(exemplo do uso do atributo "lang")
	<html lang="pt"> ... </html>

 > O atributo "title" é utilizado para fornecer "dicas" ao passar o mouse por cima de um elemento. É uma maneira de você dar informações extra a qualquer elemento que quiser.

	(exemplo do uso do atributo "title")
	<p title="I'm a tooltip">This is a paragraph.</p>

 > Por convenção, a W3C recomenda usar letras minúsculas para atributos. Também recomenda sempre usar aspas (simples ou duplas) para valores de atributos (e caso haja aspas no conteúdo do valor do atributo, use outro tipo de aspa no interior/exterior). A especificação não obriga usar aspas e nem mesmo letras minúsculas, mas é uma recomendação da W3C usar.

(Day 2)

# Cabeçalhos
 > Vão de "<h1>" até "<h6>" onde "<h1>" é o cabeçalho de maior importância, e "<h6>" de menor importância. Por padrão o navegador vai dar estilo a certas etiquetas, mas é importante não usar uma etiqueta de cabeçalho mais prioritária apenas para tornar o texto maior, para isso temos o CSS (que é outro assunto). As diferentes etiquetas são puramente semânticas, isto é, elas servem inteiramente para motores de busca estruturar melhor seu site na hora de exibir ele em uma busca.

# Parágrafos
 > Com HTML você não pode mudar a forma como o conteúdo (texto principalmente) é exibido. Por exemplo, você não pode adicionar espaços ou linhas extras em um parágrafo qualquer, todo e qualquer espaço/quebra extra o navegador vai ignorar.
 > A etiqueta "<hr>" (regra horizontal) é um elemento vazio e por via de regra é utilizado para separar conteúdos distintos (sem relação).
 > A etiqueta "<br>" é um elemento vazio e é usado quando você quer saltar para uma nova linha sem iniciar um novo parágrafo.
 > O "problema do poema": Caso queira preservar os espaços e quebras de linhas, você pode utilizar a etiqueta "<pre> ... </pre>" e ela vai preservar a formatação básica que você produzir. Geralmente esse elemento também recebe estilo com uma fonte de tamanho fixo (geralmente a Courier).

# Estilos
 > Você pode mudar o estilo de um elemento com o atributo "style".
	
	(exemplo da estrutura do atributo style)
	<tagname style="property:value;">

 > "property" é uma propriedade CSS e "value" é um valor CSS (CSS é outro tópico, aqui é apenas uma visão geral para ver que estilos não é responsabilidade do HTML e sim do CSS que é outro tipo de linguagem que usamos para dar estilo para documento HTML.

	(exemplo de algumas propriedades css)
	
	background-color:powderblue;
	 > Define a cor de fundo de um elemento.
	
	color:red;
	 > Define a cor do texto de um elemento.

	font-family:courier;
	 > Define uma fonte a ser usada por um elemento.

	font-size:160%;
	 > Define o tamanho da fonte a ser usada por um elemento.

	text-align:center;
	 > Define o alinhamento horizontal do texto do elemento.

# Formatação de Texto

	(exemplo de etiquetas para formatar texto)
	
	"<b>...</b>"
	 > Define um texto em negrito sem importância.
	
	"<strong>...</strong>"
	 > Define um texto de alta importância e normalmente é renderizado em negrito pelos navegadores.

	"<i>...</i>"
	 > Define parte de um texto em voz alterada ou clima diferente e é renderizado em itálico.

	"<em>...</em>"
	 > Define um texto de ênfase. Leitores de tela irão pronunciar as palavras dentro dessa etiqueta com ênfase usando tensão verbal.

	"<small>...</small>"
	 > Define um texto pequeno.
	
	"<mark>...</mark>"
	 > Define um texto que deve ser realçado.

	"<del>...</del>"
	 > Define um texto que foi apagado/removido de um documento. Geralmente é renderizado com uma linha atravessando a palavra.

	"<ins>...</ins>"
	 > Define um texto que foi inserido no documento. Geralmente é renderizado com sublinhado.

	"<sub>...</sub>"
	 > Define um texto subscrito, utilizado geralmente em fórmulas químicas.

	"<sup>...</sup>"
	 > Define um texto sobrescrito, utilizado geralmente em referências de rodapé.

	"<blockquote cite="fonte.com">...<blockquote>"
	 > Define uma citação de outra fonte.

	"<q>...</q>"
	 > Define uma pequena citação.

	"<abbr title="full word">...</abbr>"
	 > Define uma abreviação e ajuda motores de busca.

	"<address>...</address>"
	 > Define informações de contato do proprietário do site ou de quem escreveu o texto.

	"<cite>...</cite>"
	 > Define o título de uma obra criativa (livro, poema, música, filme, quadro, escultura etc.) - O nome do autor não é o título da obra.

	"<bdo dir="rtl">...</bdo>"
	 > Significa "Bi-Directional Override" e muda a direção de escrita do texto (direita para esquerda / esquerda para direita). Depende do suporte do navegador.

(Day 3)

# Cores HTML
 > Em HTML podemos especificar cores por nomes pré-definidos ou valores HEX, RGB, HSL, RGBA, HSLA. Há mais ou menos 140 nomes pré-definidos de cores em HTML que são compatíveis com todos os navegadores (veja: https://www.w3schools.com/colors/colors_names.asp)

 > Cores RGB são cores representadas pela forma "rgb(red, green, blue)". Cada parâmetro (red, green, blue) define a intensidade da cor com valores entre 0 e 255, então há a possibilidade de criar 256*256*256 (16.777.216 milhões) de cores.
	(exemplos de cores no padrão RGB)
	rgb(255, 0, 0)
	 > Vermelho puro.
	
	rgb(0, 255, 0)
	 > Verde puro.
	
	rgb(0, 0, 255)
	 > Azul puro.

	rgb(0, 0, 0)
	 > Preto

	rgb(255, 255, 255)
	 > Branco

	rgb(100, 100, 100)
	 > Tons de cinza (geralmente obtidos com valores iguais nos três parâmetros).

 > Cores RGBA são uma extensão das cores RGB apenas com um canal a mais, o canal alfa (transparência), ele vai de 0.0 a 1.0 onde 0.0 é completamente transparente e 1.0 é sem transparência.

 > Cores HEX são valores de cores em hexadecimal no formado #RRGGBB onde RR (red), GG (green) e BB (blue) são componentes de valores inteiros em hexadecimal  que especificam a intensidade de uma cor. Assim como os valores RGB, os valores hexadecimal são valores entre 00 e FF (0 - 255).

	(exemplos de cores no padrão HEX)
	#ffffff
	 > Branco

	#000000
	 > Preto

	#ff0000
	 > Vermelho puro

	...

 > Cores HSL são cores especificadas pelos parâmetros "(hue, saturação, luminosidade)". Cores HSLA são uma extensão do padrão HSL mas com um canal de alfa (transparência).
 > Hue é um grau no círculo de cor que vai de 0 a 360. 0 é vermelho, 120 é verde e 240 é azul.
 > Saturação é um valor em porcentagem. 0% é um tom de cinza e 100% é a cor cheia. É a intensidade da cor.
 > Luminosidade é um valor em porcentagem. 0% é preto e 100% é branco. Significa : Quanta luz você quer dar à cor? Se não der nada fica preto, se preencher de luz fica tudo branco...

	(tons de cinza usando HSL)
	hsl(0, 0%, 20%)
	hsl(0, 0%, 40%)
	hsl(0, 0%, 60%)
	 > Tons de cinza podem ser criados apenas ajustando a luminosidade de 0% a 100%.

# Estilos HTML - CSS
 > CSS significa Cascading Style Sheets (folhas de estilo em cascata). É uma linguagem para controlar o estilo de uma ou múltiplas páginas de uma só vez. Com CSS podemos controlar a cor, fonte, tamanho do texto, espaço entre elementos, como elementos estão posicionados e como são exibidos, qual imagem ou cor de fundo a ser utilizada, como será exibido em diferentes dispositivos e tamanhos de telas e muito mais.
 > A palavra "cascata" significa que o estilo aplicado a um elemento pai será aplicado também a todos os elementos filhos contidos no elemento pai. Logo, se você aplicar a cor de texto para azul no elemento 'body' todos os cabeçalhos, parágrafos e outros elementos de texto dentro de 'body' irão herdar a mesma cor de texto.
 > Você pode usar CSS de três maneiras: 'inline' ao usar o atributo 'style' em um elemento HTML específico; 'internal' ao usar o elemento 'style' na área comportamental da página (head); 'external' ao usar um elemento 'link' para um arquivo CSS externo.

	(exemplo de 'CSS inline')
	<p style='color: red;'>A red paragraph.</p>
	
	(exemplo de 'CSS internal')
	...
	<head>
	 <style>
	 p {
	  color: blue;
	 }
	 </style>
	</head>
	...

	(exemplo de 'CSS external')
	...
	<head>
	<link rel='stylesheet' href='styles.css'>
	</head>
	...
	 > O estilo externo pode ser escrito em qualquer editor de texto desde que seja salvo com a extensão '.css' e não pode conter nenhum código HTML.

	('CSS external' com link completo)
	<link rel='stylesheet' href='https://www.w3schools.com/html/styles.css'>

	('CSS external' com link relativo - pastas)
	<link rel='stylesheet' href='/html/styles.css'>

	('CSS external' com link relativo - mesma pasta)
	<link rel='stylesheet' href='styles.css'>
	
	(bordas em CSS)
	border: 2px solid red;
	 > Quase todos os elementos HTML podem conter bordas.

	(padding em CSS)
	padding: 30px;
	 > 'padding' é o espaço entre o texto e a borda (é o espaço interno do elemento).

	(margin em CSS)
	margin: 50px;
	 > 'margin' é o espaço fora da borda (é o espaço externo do elemento).


# HTML Links
 > Links HTML são hiperlinks, você pode clicar em um link e ir para outro documento. Um link não precisa ser texto, ele pode ser uma imagem ou qualquer outro elemento HTML. A etiqueta '<a href='url' target='' title=''> ... </a>' define um link que irá enviar o leitor para o endereço URL especificado.
 > Por padrão links que não são visitados são azuis e são sublinhados. Links já visitados são roxos e sublinhados. Um link ativo é sublinhado e vermelho. Mas o estilo deles podem ser alterados com CSS. Os links podem ser relativos ou absolutos (assim como no exemplo acima do CSS).
 > O atributo 'target' de um link especifica onde o documento de referência será aberto. '_self' abrirá na mesma aba/frame parente do navegador, '_blank' abrirá o documento em uma nova aba, '_parent' abrirá o documento no mesmo quadro pai e '_top' abrirá o documento na aba atual.

	(exemplo de imagem como link)

	<a href='default.html' target='_self' title='Home Page'>
	<img src='image.gif' alt='Home Page Animation'>
	</a>

	(exemplo de link para um endereço de e-mail)
	<a href='mailto:test@example.com'>Send Email</a>

	(exemplo de botão como link)
	<button onclick='document.location="default.html"'>Home Page</button>

	(exemplo de link em frames)
	<a href='...' target='my_iframe'>...</a>
	<iframe src='test.html' width='100%' name='my_iframe'></iframe>

 > Para mudar o estilo de um link você pode usar as seguintes propriedades CSS:
	
	a:link {}
	a:visited {}
	a:hover {}
	a:active {}

 > É possível inclusive combinar elas:

	a:link, a:visited {}
	a:hover, a:active {}

 > Além disso, é possível criar Marcadores e usar os links para saltar de um ponto para outro em uma página (ou até mesmo para outro documento). Para fazer isso é preciso usar o atributo 'id' para criar um marcador (id='bookmark') e em seguida usar a sintaxe '<a href='#bookmark1>...</a>' para saltar para o marcador definido.
	
	(exemplo de link para saltar para um marcador definido em outro documento)
	<a href='html_demo.html#C4'>Jump to Chapter 4</a>

# Imagens HTML
 > Imagens podem ser inseridas em um documento HTML com a etiqueta '<img>' como já visto anteriormente. Em uma imagem o atributo 'src' define o endereço (relativo ou absoluto) de uma imagem, o atributo 'alt' define um texto alternativo à imagem caso o usuário esteja usando um leitor de tela ou caso a exibição da imagem for corrompida e os atributos 'width' e 'height' são indispensáveis. É recomendável utilizar os parâmetros de largura e altura da imagem em CSS invés de atributos no HTML, pois dessa forma estilo algum posteriormente pode alterar por acidente o tamanho dessa imagem.

	(exemplo de imagem flutuando ao lado de um parágrafo)
	<p>
	 <img src='smiley.gif' alt='Smiley face' style='float:right; width:42px; height:42px;'>
	The image will float to the right of the text.
	</p>

 > Você pode criar imagens mapeadas com os elementos: 'img' e o atributo 'usemap="#mapid"'; 'map' e o atributo 'name="mapid"' e os elementos 'area' com os atributos 'shape', 'coords', 'alt' e 'href'.

	(exemplo de imagem mapeada contendo um computador e ao clicar no computador o navegador vai retornar uma mensagem específica além de carregar uma nova página)
	<img src='workplace.jpg' alt='Workplace' usemap='#workmap'>
	<map name='workmap'>
	 <area shape='rect' coords='34, 44, 270, 350' alt='Computer' href='computer.html' onclick='myFunction()'>
	</map>

	<script>
	 function myFunction() {
	  alert('You clicked the computer.');
	 }
	</script>

 > Imagens também servem de fundo para quase todos os tipos de elementos e são definidas pela propriedade 'background-image: url('');' em CSS.

	(exemplo de atributos CSS para imagens como plano de fundo)
	background-image: url('example.jpg');
	 > Especifica o endereço da imagem para colocar de plano de fundo para o elemento.
	background-repeat: no-repeat;
	 > Define se a imagem vai se repetir no elemento.
	background-size: cover;
	 > Define o tamanho da imagem de plano de fundo. 'cover' preenche o elemento. Valores como '100% 100%' preenchem e esticam a imagem.
	background-attachment: fixed;
	 > Previne a imagem de esticar.
	
 > O elemento 'picture' pode definir diversas imagens dependendo do dispositivo do usuário que estiver vendo a página.
	
	(exemplo do uso do elemento 'picture')
	<picture>
	 <source media='(min-width: 650px)' srcset='img_food_normal.jpg'>
	 <source media='(min-width: 465px)' srcset='img_food_small.jpg'>
	 <img src='img_food_normal'>
	</picture>
	 > No exemplo acima o navegador vai exibir a condição que satisfaz primeiro em relação ao tamanho do dispositivo, caso nenhum funcione o elemento 'img' vai satisfazer a exibição da imagem. Esse elemento é muito útil quando for necessário exibir a imagem correta para um tamanho específico de dispositivo ou quando não for necessário mostrar um arquivo tão pesado para um dispositivo tão pequeno. Diversos elementos 'source' também podem ser usados com diversos formatos específicos para aumentar compatibilidade com navegadores e o navegador vai executar apenas o primeiro que funcionar e ignorar o resto.

(Day 4)

# Favicon
 > Use uma etiqueta '<link>' para inserir um 'favicon'na página. O 'favicon' é uma imagem que é exibida ao lado do título da página na aba do navegador. Para inserir ele é preciso usar a seguinte sintaxe da etiqueta '<link>' na área comportamental do documento HTML (head):

	<link rel='icon' type='image/x-icon' href='images/facicon.ico'>

 > A maioria dos navegadores suportam vários tipos de extensão para atuar como um 'favicon', as extensões '.ico', '.png', '.gif', '.jpeg' e '.svg' estão entre elas.

# Page Title
 > O elemento '<title> ... </title>' que é definido na área comportamental do site (head) é de extrema importância para motores de busca (google, duckduckgo, bing etc.) e para otimização de motores de busca (SEO - Para melhorar a posição do seu site nas pesquisas). Um bom título descreve o conteúdo e o significado da página, então tente ser o mais preciso e significativo possível.

# Tabelas HTML
 > As tabelas permitem organizar dados em linhas e colunas. Para iniciar a definição de uma tabela usamos o elemento '<table> ... </table>'.
 > O elemento '<caption> ... </caption>' define uma legenda para a tabela e deve ser inserido imediatamente após o elemento 'table'.
 > O elemento 'colgroup' pode ser usado para dar estilo a um conjunto de linhas e colunas, mas suas propriedades são bem limitadas. Ele deve estar contido em 'table', logo após 'caption' (se houver) e fora de qualquer outro elemento.
 > O elemento '<thead> ... </thead>' é um elemento semântico que agrupa o cabeçalho de uma tabela.
 > O elemento '<tbody> ... </tbody>' é um elemento semântico que agrupa o corpo/dados da tabela.
 > O elemento '<tfoot> ... </tfoot>' é um elemento semântico que agrupa o conteúdo de rodapé da tabela.
 > O elemento '<tr> ... </tr>' define uma nova linha.
 > O elemento '<th> ... </th>' define uma célula de cabeçalho (coluna) para a tabela. Para usar cada nova linha como um cabeçalho (lateral) define um elemento 'th' antes de cada elemento 'td' na tabela.
 > O elemento '<td> ... </td>' define uma célula (coluna) para a tabela.
 > O atributo "colspan='x'" faz com que uma célula tome x colunas.
 > O atributo "rowspan='x'" faz com que uma célula tome x linhas.

	tr = table row
	th = table header
	td = table data

 > A propriedade CSS 'border' pode ser usada nos elementos "table, th e td" para adicionar bordas aos elementos.
 > A propriedade CSS 'border-collapse' com o valor 'collapse' não duplica as bordas dos elementos na tabela.
 > As propriedades CSS 'background-color', 'border-radius', 'border-style' e 'border-color' podem ser usadas para dar estilo às bordas da tabela.
 > As propriedades CSS 'width' e 'height' podem ser usadas (px, % etc.) para definir o tamanho de linhas ou colunas específicas em uma tabela
 > A propriedade CSS 'text-align' pode ser útil para ajustar o alinhamento de texto nas tabelas (principalmente de cabeçalhos).
 > A propriedade CSS 'padding' pode ser usada nas células 'th/td' para adicionar espaço interno nas células. É possível também usar espaçamento individual em uma direção só com as propriedades 'padding-top', 'padding-right', 'padding-bottom' e 'padding-left'.
 > A propriedade CSS 'border-spacing' pode ser usada para criar espaço entre cada célula.
 > Você pode combinar a propriedade CSS 'background-color' com o seletor ':nth-child(even)' em 'tr' para causar um efeito zebra (alternado) na cor das linhas da tabela. Dá pra combinar esse seletor e invés de mudar primeiro o elemento par, mudar o ímpar (odd) ou até mesmo combinar a aplicação em colunas e linhas invés de apenas linhas.
 > A propriedade CSS 'visibility: collapse;' pode ser usada em um 'colgroup>col' para esconder uma determinada coluna.

	(exemplo de uma tabela padrão)
	<table>
		<caption>Companies</caption>
		<tr>
			<th>Company</th>
			<th>Contact</th>
			<th>Country</th>
		</tr>
		<tr>
			<td>Alfreds</td>
			<td>Maria</td>
			<td>Germany</td>
		</tr>
		<tr>
			<td>Centro Comercial</td>
			<td>Francisco Chang</td>
			<td>Mexico</td>
		</tr>
	</table>

(Day 5)

# Listas HTML
 > Listas são utilizadas para agrupar itens relacionados.
 > Listas não ordenadas são definidas pelo elemento '<ul> ... </ul>' (unordered list) e cada item é definido pelo elemento '<li> ... </li>' (list item). Por padrão tem bolinhas pretas no início de cada item como estilo.
 > O estilo padrão da lista não ordenada pode ser alterado com CSS utilizando a propriedade 'list-style-type' com os valores 'disc', 'circle', 'square', 'none'.
 > Um elemento '<li> ... </li>' pode conter outras listas e outros elementos HTML como imagens, links etc.
	(exemplo de listas não ordenadas aninhadas)
	<ul>
		<li>Coffee</li>
		<li>Tea
			<ul>
				<li>Black tea</li>
				<li>Green tea</li>
			</ul>
		</li>
	</ul>
	
 > Listas ordenadas são definidas pelo elemento '<ol> ... </ol>' (ordered list) e cada item é definido pelo elemento '<li> ... </li>'. Por padrão há uma enumeração no início de cada item como estilo.
 > O estilo das listas ordenadas podem ser alterado, da mesma forma que as lista não ordenadas usando a propriedade CSS com os valores 'upper-alpha', 'upper-roman' etc. mas também é possível com um atributo invés da propriedade CSS, o atributo "type=''" com os valores '1', 'A', 'a', 'I', 'i'. Há outro parâmetro também chamado "start=''" que especifica em qual índice ou número começar a contagem da lista.
 > Lista de descrição são definidas pelo elemento '<dl> ... </dl>' (description list) e ela define um termo '<dt> ... </dt>' e o significado daquele termo '<dd> ... </dd>'.

 > Listas ordenadas mostram uma sequência enquanto as listas não ordenadas simplesmente representam itens sem implicação de ordem.
 > Além de ajudarem a organizar o conteúdo de uma página, as listas melhoram a legibilidade da página, melhoram a acessibilidade e podem receber um estilo diferente através do CSS. Além disso, as listas ajudam motores de busca a entender melhor a estrutura da sua página facilitando a exibição das informações e facilitando a navegação.
 > Listas não ordenadas enfatizam itens igualmente diferentes de uma lista ordenada.

(Day 6)

# Elementos "block" e "inline"
 > Elementos que são definidos como 'block', por padrão, sempre começam em uma nova linha e tomam toda a largura 'width' do documento. Exemplos desses elementos são os elementos 'p' e 'div'.
	(exemplo de elementos 'block' em HTML)
	<address> <article> <aside> <blockquote> <canvas> <dd> <div> <dl> <dt> <fieldset> <figcaption> <figure> <footer> <form> <h1>-<h6> <header> <hr> <li> <main> <nav> <noscript> <ol> <p> <pre> <section> <table> <tfoot> <ul> <video>

 > Elementos que são definidos como 'inline', por padrão, apenas tomam a largura necessária. Por exemplo o elemento '<span> ... </span>'. E é importante saber que _um 'elemento inline' não pode conter um 'elemento block'_.
	(exemplo de elementos 'inline' em HTML)
	<a> <abbr> <acronym> <b> <bdo> <big> <br> <button> <cite> <code> <dfn> <em> <i> <img> <input> <kbd> <label> <map> <object> <output> <q> <samp> <script> <select> <small> <span> <strong> <sub> <sup> <textarea> <time> <tt> <var>

 > O elemento 'div' é um elemento de nova linha, geralmente é usado como um container para outros elementos HTML. Ele não necessita de atributos, mas é comum usar atributos como 'style', 'class' e 'id'. Quando utilizado em conjunto com CSS, o elemento 'div' pode ser usado para dar estilo a blocos de conteúdo. Por padrão a largura do elemento 'div' vai ser a largura disponível do elemento pai, se o elemento pai for 'body' ele vai tomar todo o espaço da página de acordo com a janela do navegador.

 > O elemento 'span' é um elemento de linha, geralmente é usado para marcar partes de texto ou partes do documento HTML. Da mesma forma que o elemento 'div', não necessita de atributos mas é comum usar atributos como 'style', 'class', e 'id'. Quando utilizado em conjunto com CSS, o elemento 'span' pode ser usado para dar estilo a partes de texto ou partes do documento.

# Alinhando uma 'div'
 > Para centralizar o texto de uma 'div' usa-se a propriedade 'text-align' com o valor 'center', mas para centralizar uma 'div' é preciso especificar uma largura através da propriedade 'width' e utilizar a propriedade 'margin' com o valor 'auto' para os valores 'left' e 'right'.
 > Você pode ter aninhados quantos elementos 'div' quiser. Por padrão eles são alinhados verticalmente, mas há alguns métodos para alinhar eles horizontalmente.
   1. O primeiro que pode ser considerado é a propriedade 'float' com o valor 'left'. Então, em um conjunto de containers 'div' eu posso definir que todos os elementos 'div' filho do container pai recebe a propriedade de largura 'width' e um 'float' com valor 'left' (apesar desse não ser o uso ideal da propriedade 'float' é uma solução para o alinhamento horizontal de containers do tipo 'block').
   2. Outra forma (mais correta do que usar 'float') é usar a propriedade 'display' com o valor 'inline-block' (sempre junto com a propriedade 'width' para limitar o tamanho do container). Dessa forma o elemento passa a ser um elemento de 'nível inline' invés de um elemento de 'nível block'.
   3. De forma mais estável podemos fazer esse alinhamento usando o 'Módulo de Estrutura Flexbox do CSS'. Ele foi criado para facilitar estruturas de design responsivo sem precisar usar 'float' ou posicionamento. Em um container pai aplicamos com a propriedade 'display' o valor 'flex' e para os elementos filhos apenas definimos a largura deles com a propriedade 'width'. Para facilitar essa aplicação da largura para os elementos filhos podemos usar o seletor '>' no CSS, que pega os filhos direto de um elemento pai. O uso desse seletor vai ficar mais claro após os exemplos do uso das propriedades 'class' e 'id'.
   4. Seguindo um padrão de estruturas de design responsivo, temos uma outra opção ao Flexbox, podemos usar o 'Módulo de Estrutura Grid do CSS'. Ele pode parecer parecido com o Flexbox por não precisar usar 'float' ou posicionamento, mas ao contrário do Flexbox o CSS Grid permite definir mais de uma linha e posicioná-las individualmente. Em um container pai aplicamos com a propriedade 'display' o valor 'grid' e, no mesmo elemento pai, especificamos o tamanho de cada coluna com a propriedade 'grid-template-columns' com os valores variáveis de quantas colunas queremos com os respectivos tamanhos (por exemplo: 'grid-template-columns: 33% 33% 33%', para 3 colunas de mesmo tamanho).

# O atributo 'class'
 > É utilizado para identificar múltiplos elementos HTML para dar estilos em comum usando CSS ou para aplicar um comportamento personalizado usando Javascript (com 'getElementsByClassName'). Qualquer elemento pode receber uma classe. Um elemento pode ter várias classes (separadas por um simples espaço em branco) e para se referir a uma classe em CSS usamos a sintaxe '.class-name' e vale lembrar que o nome definido para a classe é sensível a 'CAIXA ALTA'. Diferentes tipos de elementos podem compartilhar a mesma classe (por exemplo, você pode usar uma classe em um elemento 'h2' e um elemento 'p').

	(exemplo do uso das propriedades 'class')
	(no HTML)
	<h2 class='city main'>São Paulo</h2>
	<h2 class='city'>Rio de Janeiro</h2>
	<h2 class='city'>Bahia</h2>
	(no CSS)
	.city {
	  background-color: tomato;
	  color: white;
	  padding: 10px;
	}
	. main {
	  background-color: #2b2b2b;
	}

	(exemplo do uso do seletor '>' em CSS)
	.my-container > div {
	  width: 33%;
	}

# O atributo 'id'
 > É utilizado para dar um ID único para um elemento HTML. Ele é sensível à CAIXA ALTA. Precisa começar com uma letra e não pode conter espaços no nome. Esse identificador (nome) precisa ser único no documento HTML. Um 'id' pode ser usado para dar um estilo único a um elemento, para manipular um elemento único com JavaScript (com 'getElementById') ou pode ser usado também como um marcador para saltar a página para um ponto específico no documento.

# Iframes em HTML
 > 'Iframes' são elementos de 'nível inline' e são utilizados para exibir uma página dentro de uma página.

	(exemplo da sintaxe básica do elemento 'iframe')
	<iframe src='url' title='description'></iframe>

 > É sempre bom incluir o atributo 'title' neste elemento pois ele auxilia leitores de tela a informar qual é o tipo de conteúdo que está sendo mostrado para o usuário.
 > Você pode alterar a largura, altura e borda do iframe usando as propriedades CSS 'width', 'height' e 'border'. É possível também definir um atributo chamado 'name' e usar ele como 'target' em um elemento '<a>' (âncora) para carregar uma página específica no próprio 'iframe' invés de uma nova aba.
	
	(exemplo do uso do atributo 'name')
	<iframe src='demo_iframe.html' name='iframe_id1' title='The Google's Page - The most famous search engine out there used to search for any web page on the web.'></iframe>
	<p><a href='https://www.google.com' target='iframe_id1'>Google's page</a></p>

# Caminhos de arquivo em HTML
 > Descreve o endereço (local) de um arquivo na estrutura de arquivo do site. Esses caminhos são utilizados quando há uma conexão externa de arquivos (páginas web, imagens, folhas de estilo em cascata [CSS], scripts [JavaScripts]).

	(exemplo de endereço (caminho) absoluto de uma página)
	<img src='https://www.foo.com/images/bar.png' alt='...'>

	(exemplo de endereço relativo [relativo à página atual])
	<img src='images/foo.jpg' alt='...'>

	(exemplo de endereço relativo fora da pasta da página atual)
	<img src='../images/foo.jpg' alt='...'>

 > Sempre que possível use endereços relativos para manter a compatibilidade com os arquivos mesmo se os endereços mudarem no futuro.

# O elemento 'meta'
 > Na área comportamental da página "<head> ... </head>" há um elemento que fornece muitos metadados para o navegador e para motores de busca e isso ajuda a aumentar o ranking de SEO da página assim como a compatibilidade entre navegadores. Abaixo estão alguns exemplos de metadados que você pode fornecer sobre a sua página.

	(exemplo: definindo o conjunto de caracteres da página)
	<meta charset='UTF-8'>

	(exemplo: definindo palavras chaves para motores de busca)
	<meta name='keywords' content='Foo, Bar, Baz'>
	
	(exemplo: definindo uma descrição da página)
	<meta name='description' content='Lorem Ipsum'>
	
	(exemplo: definindo o autor da página)
	<meta name='author' content='Douglas Lima'>
	
	(exemplo: definindo parâmetros da janela de visualização "viewport" para a página se adaptar bem em diferentes tamanhos e escalas de telas)
	<meta name='viewport' content='width=device-width, initial-scale=1.0'>

 > Há também um elemento dessa parte comportamental chamado 'base', ele define a URL base da página atual para todos os endereços (links) relativos e de que modo esses links serão abertos (_blank, _self etc.), e você pode definir da seguinte forma: <base href='https://www.foo.com/' target='_blank'>

(Day 7)

# Elemento de disposição (layout) HTML e Técnicas
 > HTML têm diversos elementos semânticos que definem diferentes partes de uma página.
 > O elemento '<header> ... </header>' define um cabeçalho para uma página ou para uma seção.
 > O elemento '<nav> ... </nav>' define um conjunto de links de navegação.
 > O elemento '<section> ... </section>' define uma seção na página.
 > O elemento '<article> ... </article>' define um conteúdo independente, autônomo.
 > O elemento '<aside> ... </aside>' define um conteúdo divergente ao conteúdo principal da página, tipo uma sidebar.
 > O elemento '<footer> ... </footer>' define um rodapé para a página.
 > O elemento '<details> ... </details>' define informações adicionais que o usuário pode abrir ou fechar como desejar.
 > O elemento '<summary> ... </summary>' define um cabeçalho para o elemento 'details'.

 > Junto com esses elementos e o conhecimento até aqui, é possível criar disposição de multi-colunas com diferentes técnicas: usando a propriedade float e clear do CSS; usando Flexbox do CSS; usando Grid do CSS ou usando um framework como, por exemplo, o Bootstrap.

# Web Design responsivo
 > Web Design responsivo ou, em minhas palavras, o processo de planejamento e criação de páginas para internet responsivo é sobre criar páginas web que ficam boas em qualquer dispositivo. Um design responsivo vai ajustar automaticamente dependendo do tamanho do dispositivo (ou janela) e dimensões. Mais especificamente, o web design responsivo é usar HTML e CSS para automaticamente redimensionar, encolher, esconder ou aumentar uma página para ficar boa em qualquer dispositivo.

	(exemplo do uso da tag de viewport que é indispensável para designs responsivos)
	<meta name='viewport' content='width=device-width, initial-scale=1.0'>
	
	(exemplo de uma imagem responsiva que estica)
	<img src='...' style='width: 100%;'>

	(exemplo de uma imagem responsiva que não estica)
	<img src='...' style='max-width: 100%'>
	 > Assim a imagem sempre pode encolher, mas nunca esticar além das suas dimensões.

	(exemplo de texto responsivo)
	<h1 style='font-size: 10vw;'>FOO</h1>
	 > 'vw' significa 'view width' ou 'largura da tela'. 1vw é 1% da largura da tela, portanto, quanto maior for a janela de visualização, maior o texto.

	(exemplo de uso da media query para mudar o estilo para diferentes tamanhos de dispositivos)
	@media screen and (max-width: 800px) { ... }
	 > Vai aplicar um estilo específico para dispositivos que tenham no máximo 800px de largura de tela. Ou seja, você está aplicando um estilo para uma tela pequena, provavelmente então iniciou fazendo um estilo para tela maiores. Há dois tipos de procedimentos nesse caso, você tem o mobile-first, onde primeiro você define o estilo para mobile primeiro e vai subindo usando a 'media query' para tamanhos mínimos de largura de tela (invés de máximo), ou você pode fazer ao contrário que é o desktop-first.

# Entidades HTML
 > São símbolos reservados em HTML. Por exemplo, em HTML, se você quiser expressar o '<' você vai ter que usar no documento html '&lt;'.

	(sintaxe de entidades em HTML)
	&entity_name;

	(entidades úteis em HTML)
	© = &copy;
	® = &reg;
	" = &quot;
	& = &amp;
	(espaço em branco) = &nbsp;
	...

 > Há também a possibilidade de usar o número da entidade para adicionar símbolos que não estão presentes no teclado.

	(sintaxe de símbolos com número de entidade)
	&#entity_number;

	(exemplo do símbolo ∑)
	&#8721;

	(ver: https://www.w3schools.com/charsets/ref_utf_symbols.asp)

# Emojis em HTML
 > Emojis são apenas caracteres do conjunto de caracteres UTF-8, logo é importante incluir a tag 'meta' para definir o conjunto de caracteres UTF-8. E eles são incluídos no documento da mesma forma que um símbolo (através do número de entidade).

	(exemplo de emojis redimensionados)
	<p style='font-size: 48px;'>
	&#128512; &#128512; &#128512;
	</p>

# Formulários
 > Formulário coletam dados vindos de usuários e normalmente esses dados são passados para um servidor para processamento.
 > O elemento '<form> ... </form>' é o container para diferentes tipos de entrada de dados.
  - O atributo 'action' do elemento 'form' define a ação a ser executado quando o formulário for enviado, geralmente os dados são enviados para uma página no servidor (exemplo: action_page.php), caso esse atributo for omitido a página atual do formulário será responsável pelo tratamento dos dados quando o formulário for enviado.
   - O atributo 'target' informa onde o resultado vai ser exibido (na mesma página, em uma nova página... são os valores do elemento 'a').
   - O atributo 'method' informa de que modo os dados serão passados para o servidor via protocolo HTTP. Por padrão o valor será 'post' onde os dados que serão passados para o servidor são exibidos na barra de endereço do navegador pois são via um método de variáveis através da URL. Já o valor 'post' faz com que os dados não fiquem visíveis na barra de endereço do navegador é feito por HTTP post transaction, é usado para informações pessoais ou importantes.

   - IMPORTANTE: Não envie dados sensíveis ou importantes via o método 'get' em um formulário, pois ele fica exposto. Use-o para dados simples, por exemplo strings de pesquisa ou dados que o usuário queira salvar no navegador que sejam pequenos pois seu limite é de 2048 caracteres. Do contrário, para dados com limite grande e variável que precisam ser seguros e não podem ser salvos nos navegadores, use o método 'post'.

   - O atributo 'autocomplete' permite o navegador sugerir valores anteriormente inseridos pelo usuário e seus valores podem ser 'on' ou 'off'.
   - O atributo 'novalidade' informa (através de um valor booleano) para os dados não serem validados assim que enviados para o servidor.

 > O elemento '<input>' é o mais usado elemento de formulário e pode ser exibido de diferentes formas dependendo do seu atributo 'type' que pode ter os valores 'text', 'radio', 'checkbox', 'submit', 'button'. Além disso há os atributos 'name' (que é um identificador para o servidor na hora de capturar os dados), 'value' (informa um valor padrão para o campo).
  - 'text' representa um campo de linha única para entrada de texto.
  - 'radio' representa botões para seleção de _uma única opção_ dentre várias opções.
  - 'checkbox' representa botões para seleção de nenhuma ou várias opções.
  - 'submit' representa um botão para enviar dados do formulário.
  - 'button' representa um botão que pode ser acionado (clicável).
  - Outros são 'search', 'reset', 'tel', 'color', 'date', 'time', 'file', 'email', 'password', 'image', 'range',  entre outros.
  - Há também restrições para o tipo 'input' e algumas são: 'required', 'autofocus', 'title' <&> 'pattern' (que especifica uma expressão regular para validação), 'placeholder', 'max', 'checked', 'disabled', 'min', 'readonly', 'maxlength' entre outros.
  - O atributo 'form' para o elemento 'input' tem o valor do id do formulário 'form' e agrega dados mesmo que o 'input' esteja fora de 'form' na hora de enviar para o servidor.
 > O elemento '<label> ... </label>' é um elemento que representa uma etiqueta para o campo de coleta de dado. O seu atributo 'for' permite receber como valor um 'id' de um campo para vincular o campo com a etiqueta, dessa forma ao clicar na etiqueta o próprio campo é acionado. Além de ser um elemento funcional, é um elemento semântico e de suma importância para acessibilidade leitores de tela.
 > O elemento '<select> ... </select>' contém elementos '<option value='...'> ... </value>' e define uma lista suspensa para seleção de uma única opção onde uma opção padrão pode ser informada com o atributo 'selected'. O atributo 'size' informa a quantidade de valores visíveis iniciais onde o padrão é 1. Além disso o atributo 'multiple' poder ser especificado para seleção de múltiplas opções com o teclado ou mouse.
 > O elemento '<textarea name='msg'> ... </textarea>' define uma entrada de texto de múltiplas linhas que podem ser variável, e seu tamanho padrão pode ser definido com os atributos 'rows' e 'cols' mas seu tamanho também pode ser definido com CSS usando as propriedades 'width' e 'height'.
 > O elemento '<fieldset> ... </fieldset>' é um elemento container para agrupar dados relacionados e pode ser usado em conjunto com o elemento '<legend> ... </legend>' para dar um título ao grupo.
 > O elemento '<datalist id='...'> ... </datalist>' em conjunto com os elementos '<option value='...'>' definem valores padrões para um determinado elemento 'input', e é importante notar que para isso funcionar o elemento 'input' precisa ter um atributo 'list' com o valor igual ao 'id' do elemento 'datalist'.
 > O elemento '<output> ... </output>' em conjunto com os atributos 'name' e 'for' são utilizados para representar o resultado de um cálculo ou processamento de dados do formulário.

# Multimídia
 > Na Web, multimídia e áudio, música, vídeos, filmes e animações. Há muitos formatos de multimídia, mas praticamente é tudo o que você assiste ou ouve.
 > Os primeiros navegadores só tinham suporte para texto, mas ao longo do tempo eles foram evoluindo e passaram a aceitar cores, fontes, imagens e multimídia.
 > Dos formatos de vídeo mais conhecidos apenas os "MP4", "WebM", and "Ogg" são de suporte pela padronização do HTML. Para áudio apenas os formatos "MP3", "WAV", and "Ogg" são de suporte pela padronização do HTML.
 > O elemento '<video> ... </video>' em conjunto com os elementos '<source src='...' type='...'> inserem um vídeo na página.
	(exemplo de inserção de vídeo na página)
	<video>
		<source src='mov.mp4' type='video/mp4'>
		<source src='mov.ogg' type='video/mp4'>
		Seu navegador não suporta vídeos HTML.
	</video>
  - Os atributos 'width' e 'height' dão dimensão ao vídeo.
  - O atributo 'controls' adiciona controles de pause, volume etc.
  - O atributo 'autoplay' inicia o vídeo automaticamente assim que a página for carregada.
  - O atributo 'muted' torna a reprodução muda de início.
 > De modo similar ao elemento 'video' temos o elemento '<audio> ... </audio>' que também pode ser usado em conjunto com os elementos 'source' e nele temos disponíveis os atributos 'muted' e 'autoplay'.
 > O elemento '<iframe> ... </iframe>' permite você exibir vídeos do YouTube na sua página. Os atributos são 'width', 'height', 'src', e na URL do link do vídeo você pode especificar 'autoplay=', 'mute=', 'loop=', 'controls=' e 'playlist='.

# HTML APIs
 - HTML Geolocation: utilizada para localizar a posição do usuário e geralmente é mais preciso em dispositivos com GPS, tipo Smartphones.
 - HTML Drag/Drop: Usado para arrastar um objeto na página para outro local.
 - HTML Web Storage: Usado para armazenar dados no navegador do usuário.
 - HTML Web Workers: É uma maneira de usar o JS para executar trabalho mesmo que a página esteja em segundo plano, congelada, ou sobrecarregada.
 - HTML SSE (Server-Sent Events): É usado para uma página receber dados (atualizações) de forma automática de um servidor.

# Elementos de código em HTML
 > Exibir código no documento HTML pode ser feito com as tags '<pre> <code> ... </code> </pre>' para manter a formatação.
 > O elemento '<samp> ... </samp>' em conjunto com 'p' pode ser usado para exibir a saída de um outro programa na página.
 > O elemento '<var> ... </var>' representa uma variável na programação ou numa expressão matemática.

# HTML JavaScript
 > O JavaScript (JS) é uma linguagem de programação que roda no navegador. O navegador tem um interpretador para essa linguagem de programação e ela é interpretada em tempo real assim que uma página começa a carregar. O JS é usado para tornar páginas dinâmicas e interativas. Para inserir um código JS no documento HTML podemos usar o elemento '<script> ... </script>' e inserir o código ali mesmo ou usar o atributo 'src' para apontar para um arquivo externo. O elemento '<noscript> ... </noscript>' fornece um conteúdo para usuários que desativaram o JS no navegador deles.
 > Com JS você pode usar o elemento '<canvas id='' width='' height=''></canvas>' para desenhar (aplicar elementos gráficos) na página linhas, retângulos, text, imagens etc. 'Canvas' é renderizado pixel por pixel a ao final de cada renderização o navegador não salva estado algum. Ideal para jogos e renderização complexas; dependente da resolução.
 > Temos também o elemento '<svg> ... </svg>' também para gráficos 2D, porém ele é uma maneira de representar gráficos através da marcação XML e é compatível com todos os navegadores modernos, além de ser uma recomendação da W3C para gráfico pois não perdem qualidade de acordo com o tamanho do dispositivo. Ele pode ser animado e o navegador salva cada forma desenhada como um objeto separado. Não recomendado para jogos e pode ser lento para renderizações complexas; independente da resolução.

# Valide seu documento HTML com o validador da W3C : validator.w3.org




